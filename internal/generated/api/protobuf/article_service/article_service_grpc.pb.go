// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package article_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error)
	GetArticles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ArticleService_GetArticlesClient, error)
	WriteArticle(ctx context.Context, in *WriteArticleRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	SaveArticleAsDraft(ctx context.Context, in *WriteArticleRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/article_service.ArticleService/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) GetArticles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ArticleService_GetArticlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArticleService_ServiceDesc.Streams[0], "/article_service.ArticleService/GetArticles", opts...)
	if err != nil {
		return nil, err
	}
	x := &articleServiceGetArticlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArticleService_GetArticlesClient interface {
	Recv() (*ArticleSummary, error)
	grpc.ClientStream
}

type articleServiceGetArticlesClient struct {
	grpc.ClientStream
}

func (x *articleServiceGetArticlesClient) Recv() (*ArticleSummary, error) {
	m := new(ArticleSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *articleServiceClient) WriteArticle(ctx context.Context, in *WriteArticleRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/article_service.ArticleService/WriteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) SaveArticleAsDraft(ctx context.Context, in *WriteArticleRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/article_service.ArticleService/SaveArticleAsDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility
type ArticleServiceServer interface {
	GetArticle(context.Context, *GetArticleRequest) (*Article, error)
	GetArticles(*emptypb.Empty, ArticleService_GetArticlesServer) error
	WriteArticle(context.Context, *WriteArticleRequest) (*wrapperspb.BoolValue, error)
	SaveArticleAsDraft(context.Context, *WriteArticleRequest) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (UnimplementedArticleServiceServer) GetArticle(context.Context, *GetArticleRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleServiceServer) GetArticles(*emptypb.Empty, ArticleService_GetArticlesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetArticles not implemented")
}
func (UnimplementedArticleServiceServer) WriteArticle(context.Context, *WriteArticleRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteArticle not implemented")
}
func (UnimplementedArticleServiceServer) SaveArticleAsDraft(context.Context, *WriteArticleRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveArticleAsDraft not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article_service.ArticleService/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_GetArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArticleServiceServer).GetArticles(m, &articleServiceGetArticlesServer{stream})
}

type ArticleService_GetArticlesServer interface {
	Send(*ArticleSummary) error
	grpc.ServerStream
}

type articleServiceGetArticlesServer struct {
	grpc.ServerStream
}

func (x *articleServiceGetArticlesServer) Send(m *ArticleSummary) error {
	return x.ServerStream.SendMsg(m)
}

func _ArticleService_WriteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).WriteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article_service.ArticleService/WriteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).WriteArticle(ctx, req.(*WriteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_SaveArticleAsDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).SaveArticleAsDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article_service.ArticleService/SaveArticleAsDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).SaveArticleAsDraft(ctx, req.(*WriteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article_service.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticle",
			Handler:    _ArticleService_GetArticle_Handler,
		},
		{
			MethodName: "WriteArticle",
			Handler:    _ArticleService_WriteArticle_Handler,
		},
		{
			MethodName: "SaveArticleAsDraft",
			Handler:    _ArticleService_SaveArticleAsDraft_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetArticles",
			Handler:       _ArticleService_GetArticles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/protobuf/article_service/article_service.proto",
}
